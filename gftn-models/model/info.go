// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Info InstitutionInfo
// swagger:model Info
type Info struct {

	// address1
	// Required: true
	Address1 *string `json:"address1" validate:"required"`

	// address2
	Address2 string `json:"address2,omitempty" validate:"omitempty"`

	// city
	// Required: true
	City *string `json:"city" validate:"required"`

	// country
	// Required: true
	Country *string `json:"country" validate:"required"`

	// geo lat
	// Required: true
	GeoLat *string `json:"geo_lat" validate:"required"`

	// geo lon
	// Required: true
	GeoLon *string `json:"geo_lon" validate:"required"`

	// institution Id
	InstitutionID string `json:"institutionId,omitempty" validate:"omitempty"`

	// kind
	// Required: true
	Kind *string `json:"kind" validate:"required"`

	// logo url
	LogoURL string `json:"logo_url,omitempty" validate:"omitempty"`

	// name
	// Required: true
	Name *string `json:"name" validate:"required"`

	// site url
	SiteURL string `json:"site_url,omitempty" validate:"omitempty"`

	// slug
	// Required: true
	Slug *string `json:"slug" validate:"required"`

	// state
	State string `json:"state,omitempty" validate:"omitempty"`

	// status
	// Required: true
	Status *string `json:"status" validate:"required"`

	// zip
	Zip string `json:"zip,omitempty" validate:"omitempty"`
}

// Validate validates this info
func (m *Info) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoLat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoLon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Info) validateAddress1(formats strfmt.Registry) error {

	if err := validate.Required("address1", "body", m.Address1); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateGeoLat(formats strfmt.Registry) error {

	if err := validate.Required("geo_lat", "body", m.GeoLat); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateGeoLon(formats strfmt.Registry) error {

	if err := validate.Required("geo_lon", "body", m.GeoLon); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Info) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Info) UnmarshalBinary(b []byte) error {
	var res Info
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
