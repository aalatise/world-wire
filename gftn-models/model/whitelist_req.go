// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WhitelistReq BlocklistRequest
// swagger:model WhitelistReq
type WhitelistReq struct {

	// approval ids
	// Required: true
	ApprovalIds []string `json:"approvalIds" validate:"required"`

	// rejected by
	RejectedBy string `json:"rejectedBy,omitempty" validate:"omitempty"`

	// requested by
	RequestedBy string `json:"requestedBy,omitempty" validate:"omitempty"`

	// status
	Status string `json:"status,omitempty" validate:"omitempty"`

	// time updated
	TimeUpdated int64 `json:"time_updated,omitempty" validate:"omitempty"`

	// whitelisted Id
	// Required: true
	WhitelistedID *string `json:"whitelistedId" validate:"required"`

	// whitelister Id
	// Required: true
	WhitelisterID *string `json:"whitelisterId" validate:"required"`
}

// Validate validates this whitelist req
func (m *WhitelistReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitelistedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitelisterID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WhitelistReq) validateApprovalIds(formats strfmt.Registry) error {

	if err := validate.Required("approvalIds", "body", m.ApprovalIds); err != nil {
		return err
	}

	return nil
}

func (m *WhitelistReq) validateWhitelistedID(formats strfmt.Registry) error {

	if err := validate.Required("whitelistedId", "body", m.WhitelistedID); err != nil {
		return err
	}

	return nil
}

func (m *WhitelistReq) validateWhitelisterID(formats strfmt.Registry) error {

	if err := validate.Required("whitelisterId", "body", m.WhitelisterID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WhitelistReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WhitelistReq) UnmarshalBinary(b []byte) error {
	var res WhitelistReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
