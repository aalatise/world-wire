// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountReq AccountRequest
// swagger:model AccountReq
type AccountReq struct {

	// approval ids
	// Required: true
	ApprovalIds []string `json:"approvalIds" validate:"required"`

	// name
	// Required: true
	Name *string `json:"name" validate:"required"`

	// participant Id
	// Required: true
	ParticipantID *string `json:"participantId" validate:"required"`
}

// Validate validates this account req
func (m *AccountReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountReq) validateApprovalIds(formats strfmt.Registry) error {

	if err := validate.Required("approvalIds", "body", m.ApprovalIds); err != nil {
		return err
	}

	return nil
}

func (m *AccountReq) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AccountReq) validateParticipantID(formats strfmt.Registry) error {

	if err := validate.Required("participantId", "body", m.ParticipantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountReq) UnmarshalBinary(b []byte) error {
	var res AccountReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
