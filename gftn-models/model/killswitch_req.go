// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KillswitchReq KillswitchRequest
// swagger:model KillswitchReq
type KillswitchReq struct {

	// account address
	// Required: true
	AccountAddress *string `json:"accountAddress" validate:"required"`

	// approval ids
	// Required: true
	ApprovalIds []string `json:"approvalIds" validate:"required"`

	// participant Id
	// Required: true
	ParticipantID *string `json:"participantId" validate:"required"`

	// reactivate approved by
	ReactivateApprovedBy string `json:"reactivateApprovedBy,omitempty" validate:"omitempty"`

	// reactivate rejected by
	ReactivateRejectedBy string `json:"reactivateRejectedBy,omitempty" validate:"omitempty"`

	// reactivate requested by
	ReactivateRequestedBy string `json:"reactivateRequestedBy,omitempty" validate:"omitempty"`

	// status
	// Required: true
	Status *string `json:"status" validate:"required"`

	// suspend approved by
	SuspendApprovedBy string `json:"suspendApprovedBy,omitempty" validate:"omitempty"`

	// suspend rejected by
	SuspendRejectedBy string `json:"suspendRejectedBy,omitempty" validate:"omitempty"`

	// suspend requested by
	SuspendRequestedBy string `json:"suspendRequestedBy,omitempty" validate:"omitempty"`
}

// Validate validates this killswitch req
func (m *KillswitchReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovalIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KillswitchReq) validateAccountAddress(formats strfmt.Registry) error {

	if err := validate.Required("accountAddress", "body", m.AccountAddress); err != nil {
		return err
	}

	return nil
}

func (m *KillswitchReq) validateApprovalIds(formats strfmt.Registry) error {

	if err := validate.Required("approvalIds", "body", m.ApprovalIds); err != nil {
		return err
	}

	return nil
}

func (m *KillswitchReq) validateParticipantID(formats strfmt.Registry) error {

	if err := validate.Required("participantId", "body", m.ParticipantID); err != nil {
		return err
	}

	return nil
}

func (m *KillswitchReq) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KillswitchReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KillswitchReq) UnmarshalBinary(b []byte) error {
	var res KillswitchReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
